#% id=intro
# Code cells can have multiple expressions. Each value is shown, unless the
# result is None in which case nothing is shown. This is consistent with the
# behavior of the Python REPL.
1
2
None
4

#% test
# Common test setup code
import pybook
import pytest

#% test
# Test that when intro cell is executed, shows the right things in output area
def test_three():
    assert 3==4

pytest.main()
'''
assert(pybook.sync_test_run_outputs(__cells['intro']['source']) == [
    {'name': 'stdout', 'text/plain': '→ 1\n'},
    {'name': 'stdout', 'text/plain': '→ 2\n'},
    {'name': 'stdout', 'text/plain': '→ 4\n'}
])
'''
#% id=print
# You can also print to stdout, which shows up in the output area.
print("Hello from PyBook")

#%
# There is one Python state. It will be affected by each cell you evaluate.
# Try evaluating this cell and the next one in different orders.
x = 0
y = 0
x, y

#%
print(f'x is {x}, y is {y}')
x += 1
y += 3
x, y

#%%
You can also have cells that have "submit" buttons. These run Python code and
can respond based on the text that is submitted.

#% user language=text id=submit1
Enter something here

#% submit
print(f"You typed {__input}")

#% test
print(__source['submit1'])
cell=__cells['submit1']
print(cell)
print(cell['user'])
