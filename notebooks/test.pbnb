#% test id=setup

# Common test setup code
import pybook
state = pybook.fresh_state()

#% id=intro

# Code cells can have multiple expressions. Each value is shown, unless the
# result is None in which case nothing is shown. This is consistent with the
# behavior of the Python REPL.
1
2
None
4

#% test id=intro

pybook.sync_exec(__source['intro'], state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': '→ 1\n→ 2\n→ 4\n'}
])

#% id=print

# You can also print to stdout, which shows up in the output area.
print("Hello from PyBook")

#% test id=print

pybook.sync_exec(__source['print'], state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': 'Hello from PyBook\n'},
])

#% id=xystate

# There is one Python state. It will be affected by each cell you evaluate.
# Try evaluating this cell and then the next one.
x = 1
y = 2
x, y

#% test id=xystate

pybook.sync_exec(__source['xystate'], state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': '→ (1, 2)\n'},
])

#% id=xystate_use

print(f'x is {x}, y is {y}')
x += 1
y += 3
x, y

#% test id=xystate_use

pybook.sync_exec(__source['xystate_use'], state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': 'x is 1, y is 2\n→ (2, 5)\n'},
])

state = pybook.fresh_state()
pybook.sync_exec(__source['xystate'], state=state)
pybook.sync_exec(__source['xystate_use'], state=state)
pybook.reset_outputs()
pybook.sync_exec(__source['xystate_use'], state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': 'x is 2, y is 5\n→ (3, 8)\n'},
])

#%%

You can also have cells that have "submit" buttons. These run Python code and
can respond based on the text that is submitted.

#% user language=text id=submit1

Enter something here

#% submit

print(f"You typed {__input}")

#% test id=submit1

pybook.sync_exec(__source['submit1'], user=__cell['submit1']['user'], state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': 'You typed Enter something here\n'},
])
pybook.sync_exec(__source['submit1'], user='Nathan', state=state)
pybook.assertEqual(pybook.get_outputs(),
[
    {'name': 'stdout', 'text/plain': 'You typed Nathan\n'},
])

#% test id=teardown
